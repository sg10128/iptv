// index.js (PowerMax Xtream IPTV Addon)
const express = require("express");
const fetch = require("node-fetch");
const app = express();
const PORT = process.env.PORT || 3000;

// Xtream Codes credentials
const XTREAM_URL = "http://mrg243.club:8080";
const XTREAM_USER = "Stephengill";
const XTREAM_PASS = "bBtfRex";

// Your specific categories
const ALLOWED_CATS = [
  "GAA", "Live Events", "Live Football", "Saorview", "Serie A",
  "SuperSport beIN", "UEFA", "UK Premier League", "Sky Sports", "TNT Sports"
];

// Build manifest catalogs (each category + All UK)
const manifestCatalogs = [
  ...ALLOWED_CATS.map(cat => ({
    type: "tv",
    id: cat.replace(/\s+/g, "-").toLowerCase(),
    name: cat
  })),
  { type: "tv", id: "all-uk-categories", name: "All UK Categories" }
];

// Helper to fetch Xtream API
const fetchXtream = async (path) => {
  const url = `${XTREAM_URL}/player_api.php?username=${XTREAM_USER}&password=${XTREAM_PASS}&${path}`;
  const r = await fetch(url);
  return r.json();
};

// Manifest endpoint
app.get("/manifest.json", (req, res) => {
  res.json({
    id: "org.powermax.xtream",
    version: "1.2.0",
    name: "PowerMax Xtream IPTV",
    description: "Live TV â€“ GAA, UEFA, Sky Sports, all UK, and more (with search & EPG)",
    logo: "https://i.imgur.com/SS7FSoH.png",
    resources: ["catalog", "stream", "meta"],
    types: ["tv"],
    catalogs: manifestCatalogs
  });
});

// Catalog endpoint
app.get("/catalog/tv/:id/:extra?.json", async (req, res) => {
  const rawId = req.params.id;
  const cat = rawId.replace(/-/g, " ");
  const search = (req.query.search || "").toLowerCase();
  const allChannels = await fetchXtream("action=get_live_streams");

  let channels;
  if (cat === "All UK Categories") {
    channels = allChannels.filter(ch => ch.category_name.toLowerCase().includes("uk"));
  } else if (ALLOWED_CATS.includes(cat)) {
    channels = allChannels.filter(ch => ch.category_name === cat);
  } else {
    channels = allChannels.filter(ch =>
      ALLOWED_CATS.includes(ch.category_name) ||
      ch.category_name.toLowerCase().includes("uk")
    );
  }

  if (search) {
    channels = channels.filter(ch => ch.name.toLowerCase().includes(search));
  }

  const epgData = await fetchXtream("action=get_simple_data_table");

  const metas = channels.map(ch => {
    const listings = epgData[ch.stream_id]?.epg_listings || [];
    const now = listings.find(e =>
      Date.now() / 1000 >= Number(e.start) && Date.now() / 1000 < Number(e.end)
    );
    return {
      id: ch.stream_id.toString(),
      type: "tv",
      name: ch.name,
      poster: ch.stream_icon || "https://i.imgur.com/SS7FSoH.png",
      description: now
        ? `${now.title} (${new Date(now.start * 1000).toLocaleTimeString()} - ${new Date(now.end * 1000).toLocaleTimeString()})`
        : "No EPG info",
      background: ch.stream_icon
    };
  });

  res.json({ metas });
});

// Stream endpoint
app.get("/stream/tv/:id.json", (req, res) => {
  const id = req.params.id;
  res.json({
    streams: [
      {
        url: `${XTREAM_URL}/live/${XTREAM_USER}/${XTREAM_PASS}/${id}.ts`
      }
    ]
  });
});

// Meta endpoint
app.get("/meta/tv/:id.json", async (req, res) => {
  const id = req.params.id;
  const allChannels = await fetchXtream("action=get_live_streams");
  const ch = allChannels.find(c => c.stream_id.toString() === id);
  if (!ch) return res.json({});
  res.json({
    meta: {
      id: ch.stream_id.toString(),
      type: "tv",
      name: ch.name,
      poster: ch.stream_icon || "https://i.imgur.com/SS7FSoH.png",
      description: ch.category_name,
      background: ch.stream_icon
    }
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`PowerMax Xtream IPTV running on port ${PORT}`);
});{
  "name": "powermax-xtream-iptv",
  "version": "1.2.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "node-fetch": "^2.6.7"
  }
}
